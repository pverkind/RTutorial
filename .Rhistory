text_v <- scan(url, what="character", sep="\n", encoding="UTF-8")
splitter_index <- which(text_v == "#META#Header#End#")
lines_v <- text_v[(splitter_index+1):length(text_v)]
book_v <- paste(lines_v, collapse = " ")
book_word_l <- str_split(book_v, "\\W+")
book_word_v <- unlist(book_word_l)
which(book_word_v == "حدثني")
cat(which(book_word_v == "حدثني"))
class(which(book_word_v == "حدثني"))
?str_which
test_v <- c("abc", "def", "cbad")
str_which(test_v, "a.")
.libPaths()
lazyLoad(readline())
lazyLoad(readline())
force(render_exercise)
force(required_elements)
find(render_exercise)
lazyLoad(readline(), envir = parent.frame())
lazyLoad(readline(), envir = parent.frame())
find(render_exercise)
methods(tutorial)
methods("tutorial"")
methods("tutorial")
library(tutorial)
methods("tutorial")
showMethods("tutorial")
body("tutorial")
View(build_example)
View(go_interactive)
?tutorial
help("tutorial")
View(render_exercise)
View(build_example)
library("stringr")
test_v <- c("abc", "def", "cbad")
str_which(test_v, "a.")
logic_v <- c(TRUE, FALSE, FALSE)
num_v <- as.numeric(logic_v)
num_v
plot_v <- logic_v
plot_v[TRUE] <- plot_v[1]
plot_v
num_v[0] <- NA
num_v
num_v <- replace(num_v, num_v==0, NA)
num_v
plot(c(NA, NA, 1,1,1,1, NA, 1, NA, 1, NA, NA, 1, 1, NA, 1))
plot(c(NA, NA, 1,1,1,1, NA, 1, NA, 1, NA, NA, 1, 1, NA, 1), type="h")
plot(c(NA, NA, 1,1,1,1, NA, 1, NA, 1, NA, NA, 1, 1, NA, 1), type="h", ylim = c(0, 1), yaxt = 'n')
test <- c(NA, NA, 1,1,1,1, NA, 1, NA, 1, NA, NA, 1, 1, NA, 1)
test <- c("aa", "ab", "bc", "ba", "cd", "ca")
str_detect(test, "a")
str_match(test, "a")
str_locate(test, 'a')
str_which(test, 'a')
locs <- str_which(test, 'a')
plot(locs, 1)
plot(locs, c(1))
plot(str_detect(test, "a"), type="h")
test_v <- c("ab", "ba", "ad", "aa")
str_which(test_v, "a.")  # regular expression: match the character "a" followed by another character
library("stringr")  # load the `stringr` package, which contains the `str_detect` function
test_v <- c("ab", "ba", "ad", "aa")
str_detect(test_v, "a.")  # regular expression: match the character "a" followed by another character
plot(match_V,
type = "h",      # "h" stands for histogram (see below)
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
yaxt = 'n'       # do not include tick marks (which display values) on the Y axis
plot(match_V,
type = "h",      # "h" stands for histogram (see below)
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
yaxt = 'n'       # do not include tick marks (which display values) on the Y axis
)
test_v <- c("ab", "ba", "ad", "aa")
match_V <- str_detect(test_v, "a.")
plot(match_V,
type = "h",      # "h" stands for histogram (see below)
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
yaxt = 'n'       # do not include tick marks (which display values) on the Y axis
)
test_v <- c("ab", "ba", "ad", "aa")
match_V <- str_detect(test_v, "a.")
plot(match_V,
type = "h",      # "h" stands for histogram (see below)
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
yaxt = 'n'       # do not include tick marks (which display values) on the Y axis
)
test_v <- c("ab", "ba", "ad", "aa")
match_V <- str_detect(test_v, "a.")
plot(match_V,
type = "h",      # "h" stands for histogram (see below)
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
)
ptrn_2 <- "[ياى]"
ptrn <- paste(ptrn_1, ptrn_2)
ptrn_1 <- "حدثن"
ptrn_2 <- "[ياى]"
paste(ptrn_1, ptrn_2)
paste(ptrn_1, ptrn_2, sep="")
library("stringr")
ptrn_1 <- "حدثن"
ptrn_2 <- "[ياى]"
ptrn <- paste(ptrn_1, ptrn_2, sep="")  # concatenate both patterns into a single pattern
haddathani_v <- str_detect(book_word_v, ptrn)
plot(match_v,
type = "h",      # "h" stands for histogram (see below)
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
main = "Dispersion plot for ḥaddathani/a",  # title for the plot
xlab = "Index positions",                   # label for the x axis
ylab = ""                                   # label for the y axis
)
library("stringr")
ptrn_1 <- "حدثن"
ptrn_2 <- "[ياى]"
ptrn <- paste(ptrn_1, ptrn_2, sep="")  # concatenate both patterns into a single pattern
haddathani_v <- str_detect(book_word_v, ptrn)
plot(haddathani_v,
type = "h",      # "h" stands for histogram (see below)
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
main = "Dispersion plot for ḥaddathani/a",  # title for the plot
xlab = "Index positions",                   # label for the x axis
ylab = ""                                   # label for the y axis
)
library("stringr")
ptrn_1 <- "حدثن"
ptrn_2 <- "[ياى]"
ptrn <- paste(ptrn_1, ptrn_2, sep="")  # concatenate both patterns into a single pattern
haddathani_v <- str_detect(book_word_v, ptrn)
plot(haddathani_v,
type = "h",      # "h" stands for histogram (see below)
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
xlim = c(0, length(haddathani_v)), # set the maximum value of the X axis to the number of tokens in the text
main = "Dispersion plot for ḥaddathani/a",  # title for the plot
xlab = "Index positions",                   # label for the x axis
ylab = ""                                   # label for the y axis
)
library("stringr")
ptrn_1 <- "حدثن"
ptrn_2 <- "[ياى]"
ptrn <- paste(ptrn_1, ptrn_2, sep="")  # concatenate both patterns into a single pattern
haddathani_v <- str_detect(book_word_v, ptrn)
plot(haddathani_v,
type = "h",      # "h" stands for histogram
yaxt = "n",      # do not include tick marks for values on the Y axis
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
xlim = c(0, length(haddathani_v)), # set the maximum value of the X axis to the number of tokens in the text
main = "Dispersion plot for ḥaddathani/a",  # title for the plot
xlab = "Index positions",                   # label for the x axis
ylab = "",                                  # label for the y axis
)
library("stringr")
ptrn_0 <- "^# [وف]?"  # start of the line, followed by hashtag and space, and optionally by conjunctions wa- or fa-
ptrn_1 <- "حدثن"
ptrn_2 <- "[ياى]"
ptrn <- paste(ptrn_0, ptrn_1, ptrn_2, sep="")  # concatenate all patterns into a single pattern
haddathani_first_v <- str_detect(lines_v, ptrn)
plot(haddathani_first_v,
type = "h",      # "h" stands for histogram
yaxt = "n",      # do not include tick marks for values on the Y axis
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
xlim = c(0, length(haddathani_v)), # set the maximum value of the X axis to the number of tokens in the text
main = "Dispersion plot for ḥaddathani/a in initial position",  # title for the plot
xlab = "Index positions",                   # label for the x axis
ylab = "",                                  # label for the y axis
)
library("stringr")
ptrn_0 <- "^# [وف]?"  # start of the line, followed by hashtag and space, and optionally by conjunctions wa- or fa-
ptrn_1 <- "حدثن"
ptrn_2 <- "[ياى]"
ptrn <- paste(ptrn_0, ptrn_1, ptrn_2, sep="")  # concatenate all patterns into a single pattern
haddathani_first_v <- str_detect(lines_v, ptrn)
plot(haddathani_first_v,
type = "h",      # "h" stands for histogram
yaxt = "n",      # do not include tick marks for values on the Y axis
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
xlim = c(0, length(lines_v)), # set the maximum value of the X axis to the number of tokens in the text
main = "Dispersion plot for ḥaddathani/a in initial position",  # title for the plot
xlab = "Index positions",                   # label for the x axis
ylab = "",                                  # label for the y axis
)
library("stringr")
ptrn_0 <- "# "  # start of the line, followed by hashtag and space, and optionally by conjunctions wa- or fa-
ptrn_1 <- "حدثن"
ptrn_2 <- "[ياى]"
ptrn <- paste(ptrn_0, ptrn_1, ptrn_2, sep="")  # concatenate all patterns into a single pattern
haddathani_first_v <- str_detect(lines_v, ptrn)
plot(haddathani_first_v,
type = "h",      # "h" stands for histogram
yaxt = "n",      # do not include tick marks for values on the Y axis
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
xlim = c(0, length(lines_v)), # set the maximum value of the X axis to the number of tokens in the text
main = "Dispersion plot for ḥaddathani/a in initial position",  # title for the plot
xlab = "Index positions",                   # label for the x axis
ylab = "",                                  # label for the y axis
)
lines_v
library("stringr")
ptrn_0 <- "# "  # start of the line, followed by hashtag and space, and optionally by conjunctions wa- or fa-
ptrn_1 <- "حدثن"
ptrn_2 <- "[ياى]"
ptrn <- paste(ptrn_0, ptrn_1, ptrn_2, sep="")  # concatenate all patterns into a single pattern
haddathani_first_v <- str_detect(lines_v, ptrn)
plot(haddathani_first_v,
type = "h",      # "h" stands for histogram
yaxt = "n",      # do not include tick marks for values on the Y axis
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
xlim = c(0, length(lines_v)), # set the maximum value of the X axis to the number of tokens in the text
main = "Dispersion plot for ḥaddathani/a in initial position",  # title for the plot
xlab = "Index positions",                   # label for the x axis
ylab = "",                                  # label for the y axis
)
library("stringr")
# make sure Arabic is displayed correctly:
Sys.setlocale(category = "LC_ALL", locale = "C.UTF-8")
url <- "https://raw.githubusercontent.com/OpenITI/0425AH/master/data/0401IbnSaburZayyat/0401IbnSaburZayyat.TibbAimma/0401IbnSaburZayyat.TibbAimma.Shia001288-ara1"
text_v <- scan(url, what="character", sep="\n", encoding="UTF-8")
splitter_index <- which(text_v == "#META#Header#End#")
lines_v <- text_v[(splitter_index+1):length(text_v)]
book_v <- paste(lines_v, collapse = "\n")
book_word_l <- str_split(book_v, "\\W+")
book_word_v <- unlist(book_word_l)
library("stringr")
# make sure Arabic is displayed correctly:
Sys.setlocale(category = "LC_ALL", locale = "C.UTF-8")
url <- "https://raw.githubusercontent.com/OpenITI/0325AH/master/data/0310Tabari/0310Tabari.Tarikh/0310Tabari.Tarikh.Shamela0009783BK1-ara1.completed"
text_v <- scan(url, what="character", sep="\n", encoding="UTF-8")
splitter_index <- which(text_v == "#META#Header#End#")
lines_v <- text_v[(splitter_index+1):length(text_v)]
book_v <- paste(lines_v, collapse = "\n")
book_word_l <- str_split(book_v, "\\W+")
book_word_v <- unlist(book_word_l)
library("stringr")
ptrn_1 <- "حدثن"
ptrn_2 <- "[ياى]"
ptrn <- paste(ptrn_1, ptrn_2, sep="")  # concatenate both patterns into a single pattern
haddathani_v <- str_detect(book_word_v, ptrn)
plot(haddathani_v,
type = "h",      # "h" stands for histogram
yaxt = "n",      # do not include tick marks for values on the Y axis
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
xlim = c(0, length(haddathani_v)), # set the maximum value of the X axis to the number of tokens in the text
main = "Dispersion plot for ḥaddathani/a",  # title for the plot
xlab = "Index positions",                   # label for the x axis
ylab = "",                                  # label for the y axis
)
lines_v
library("stringr")
ptrn_0 <- "^# [وف]?"  # start of line, followed by hashtag and space, and optionally one of the conjunctions wa- or fa-
ptrn_1 <- "حدثن"
ptrn_2 <- "[ياى]"
ptrn <- paste(ptrn_0, ptrn_1, ptrn_2, sep="")  # concatenate all patterns into a single pattern
haddathani_first_v <- str_detect(lines_v, ptrn)
plot(haddathani_first_v,
type = "h",      # "h" stands for histogram
yaxt = "n",      # do not include tick marks for values on the Y axis
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
xlim = c(0, length(lines_v)), # set the maximum value of the X axis to the number of tokens in the text
main = "Dispersion plot for ḥaddathani/a in initial position",  # title for the plot
xlab = "Index positions",                   # label for the x axis
ylab = "",                                  # label for the y axis
)
library("stringr")
ptrn_1 <- "أخبرن"
ptrn_2 <- "[ياى]"
ptrn <- paste(ptrn_1, ptrn_2, sep="")  # concatenate both patterns into a single pattern
akhbarani_v <- str_detect(book_word_v, ptrn)
plot(akhbarani_v,
type = "h",      # "h" stands for histogram
yaxt = "n",      # do not include tick marks for values on the Y axis
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
xlim = c(0, length(akhbarani_v)), # set the maximum value of the X axis to the number of tokens in the text
main = "Dispersion plot for akhbarani/a",  # title for the plot
xlab = "Index positions",                   # label for the x axis
ylab = "",                                  # label for the y axis
)
lines_v
library("stringr")
ptrn_0 <- "^# [وف]?"  # start of line, followed by hashtag and space, and optionally one of the conjunctions wa- or fa-
ptrn_1 <- "حدثن"
ptrn_2 <- "[ياى]"
ptrn <- paste(ptrn_0, ptrn_1, ptrn_2, sep="")  # concatenate all patterns into a single pattern
akhbarani_first_v <- str_detect(lines_v, ptrn)
plot(akhbarani_first_v,
type = "h",      # "h" stands for histogram
yaxt = "n",      # do not include tick marks for values on the Y axis
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
xlim = c(0, length(lines_v)), # set the maximum value of the X axis to the number of tokens in the text
main = "Dispersion plot for akhbarani/a in initial position",  # title for the plot
xlab = "Index positions",                   # label for the x axis
ylab = "",                                  # label for the y axis
)
library("stringr")
ptrn_1 <- "^# [وف]?"  # start of line, followed by hashtag and space, and optionally one of the conjunctions wa- or fa-
ptrn_2 <- "[أا]"
ptrn_3 <- "خبرن"
ptrn_4 <- "[ياى]"
ptrn <- paste(ptrn_1, ptrn_2, ptrn_3, ptrn_4, sep="")  # concatenate all patterns into a single pattern
akhbarani_first_v <- str_detect(lines_v, ptrn)
plot(akhbarani_first_v,
type = "h",      # "h" stands for histogram
yaxt = "n",      # do not include tick marks for values on the Y axis
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
xlim = c(0, length(lines_v)), # set the maximum value of the X axis to the number of tokens in the text
main = "Dispersion plot for akhbarani/a in initial position",  # title for the plot
xlab = "Index positions",                   # label for the x axis
ylab = "",                                  # label for the y axis
)
akhbarani_first_v <- as.numeric(akhbarani_first_v)
chunks_500 <- vector()
for (i %in% 1:500) {}
for (i in 1:500) {}
for (i in 1:500) {
}
for (i in 1:length(akhbarani_first_v)) {}
for (i in 1:length(akhbarani_first_v)) {
if i %% 500) {
for (i in 1:length(akhbarani_first_v)) {
if (i %% 500) {
}}
chunk <- 0
for (i in 1:length(akhbarani_first_v)) {
if (i %% 500) {
chunk <- chunk + akhbarani_first_v[i]
}}
for (i in 1:length(akhbarani_first_v)) {
chunk <- chunk + akhbarani_first_v[i]
if (i %% 500) {
chunks_500 <- c(chunks_500, chunk)
}
}
for (i in 1:length(akhbarani_first_v)) {
chunk <- chunk + akhbarani_first_v[i]
if (i %% 500) {
chunks_500 <- c(chunks_500, chunk)
chunk <- 0  # reset chunk to 0
}
}
chunks_500 <- c(chunks_500, chunk)
plot(chunks_500, type="h")
10 %% 500
i <- 500
chunks_500 <- vector()
while (i < length(akhbarani_first_v)) {
c <- sum(akhbarani_first_v[i-499:i])
while (i < length(akhbarani_first_v)) {
s <- sum(akhbarani_first_v[i-499:i])
chunks_500 <- c(chunks_500, s)
}
i <- 0
while (i < length(akhbarani_first_v)) {
s <- sum(akhbarani_first_v[i:i+500])
i <- i + 500
chunks_500 <- c(chunks_500, s)
}
plot(chunks_500, type="h")
i <- 0
while (i < length(akhbarani_first_v)) {
s <- sum(akhbarani_first_v[i:i+500])
i <- i + 500
chunks_500 <- vector()
while (i < length(akhbarani_first_v)) {
+   s <- sum(akhbarani_first_v[i:i+500])
+   i <- i + 500
+   chunks_500 <- c(chunks_500, s)
while (i < length(akhbarani_first_v)) {
s <- sum(akhbarani_first_v[i:i+500])
i <- i + 500
chunks_500 <- c(chunks_500, s)
paste(i, s)
}
plot(chunks_500, type="h")
chunks_500
akhbarani_first_v
while (i < length(akhbarani_first_v)) {
chunks_500 <- vector()
while (i < length(akhbarani_first_v)) {
s <- sum(akhbarani_first_v[i:i+500])
i <- i + 500
chunks_500 <- c(chunks_500, s)
print(paste(i, s))
}
while (i < length(akhbarani_first_v)) {
s <- sum(akhbarani_first_v[i:i+500])
i <- i + 500
print(i)
}
length(akhbarani_first_v)
i <- 0
chunks_500 <- vector()
while (i < length(akhbarani_first_v)) {
s <- sum(akhbarani_first_v[i:i+500])
i <- i + 500
print(paste(i, s))
chunks_500 <- c(chunks_500, s)
}
plot(chunks_500, type="h")
chunks_500
akhbarani_first_v <- as.numeric(akhbarani_first_v)
sum(akhbarani_first_v)
i <- 0
chunks_500 <- vector()
while (i < length(akhbarani_first_v)) {
chunk_sum <- sum(akhbarani_first_v[(i+1):(i+500)])
i <- i +500
chunks_500 <- c(chunks_500, chunk_sum)
}
plot(chunks_500, type="h")
akhbarani_first_v <- as.numeric(akhbarani_first_v)
sum(akhbarani_first_v)
i <- 0
chunks_500 <- vector()
while (i < length(akhbarani_first_v)) {
chunk_sum <- sum(akhbarani_first_v[(i+1):(i+500)])
i <- i +500
chunks_500 <- c(chunks_500, chunk_sum)
print(paste(i, chunk_sum))
}
plot(chunks_500, type="h")
sum_n_elements <- function(my_vector, n) {
num_v <- as.numeric(my_vector)
i <- 0
chunks <- vector()
while (i < length(num_v)) {
chunk_sum <- sum(num_v[(i+1):(i+n)])
i <- i + n
chunks <- c(chunks, chunk_sum)
print(paste(i, chunk_sum))
}
}
chunks_500 <- sum_n_elements(akhbarani_first_v, 500)
plot(chunks_500, type="h")
sum_n_elements <- function(my_vector, n) {
num_v <- as.numeric(my_vector)
i <- 0
chunks <- vector()
while (i < length(num_v)) {
chunk_sum <- sum(num_v[(i+1):(i+n)])
i <- i + n
chunks <- c(chunks, chunk_sum)
print(paste(i, chunk_sum))
}
return(chunks)
}
chunks_500 <- sum_n_elements(akhbarani_first_v, 500)
plot(chunks_500, type="h")
sum_n_elements <- function(my_vector, n) {
num_v <- as.numeric(my_vector)
i <- 0
chunks <- vector()
while (i < length(num_v)) {
chunk_sum <- sum(num_v[(i+1):(i+n)])
i <- i + n
chunks <- c(chunks, chunk_sum)
print(paste(i, chunk_sum))
}
return(chunks)
}
chunks_1000 <- sum_n_elements(akhbarani_first_v, 1000)
plot(chunks_1000, type="h")
library("stringr")
test_v <- c("ab", "ba", "ad", "aa")
match_v <- str_detect(test_v, "a.")
plot(match_v,
type = "h",      # "h" stands for histogram (see below)
ylim = c(0, 1),  # set the maximum value of the Y axis to 1
yaxp = c(0, 1, 1))
)
library("stringr")
test_v <- c("ab", "ba", "ad", "aa")
match_v <- str_detect(test_v, "a.")
plot(match_v,
type = "h",        # "h" stands for histogram (see below)
ylim = c(0, 1),    # set the maximum value of the Y axis to 1
yaxp = c(0, 1, 1) # set the y axis values
xaxp = c(1, 4, 1)
library("stringr")
test_v <- c("ab", "ba", "ad", "aa")
match_v <- str_detect(test_v, "a.")
plot(match_v,
type = "h",        # "h" stands for histogram (see below)
ylim = c(0, 1),    # set the maximum value of the Y axis to 1
yaxp = c(0, 1, 1), # set the y axis values
xaxp = c(1, 4, 1)
)
library("stringr")
test_v <- c("ab", "ba", "ad", "aa")
match_v <- str_detect(test_v, "a.")
plot(match_v,
type = "h",        # "h" stands for histogram (see below)
ylim = c(0, 1),    # set the maximum value of the Y axis to 1
yaxp = c(0, 1, 1), # set the y axis values
xaxp = c(1, 4, 4)
)
library("stringr")
test_v <- c("ab", "ba", "ad", "aa")
match_v <- str_detect(test_v, "a.")
plot(match_v,
type = "h",        # "h" stands for histogram (see below)
ylim = c(0, 1),    # set the maximum value of the Y axis to 1
yaxp = c(0, 1, 1), # set the y axis values
xaxp = c(1, 4, 3)
)
library("stringr")
test_v <- c("ab", "ba", "ad", "aa")
match_v <- str_detect(test_v, "a.")
plot(match_v,
type = "h",         # "h" stands for histogram (see below)
ylim = c(0, 1),     # set the maximum value of the Y axis to 1
yaxp = c(0, 1, 1),  # set the y axis values (1 interval,  between 0 and 1)
xaxp = c(1, 4, 3),  # set the x axis values (3 intervals, between 1 and 4)
)
